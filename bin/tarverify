#!/usr/bin/env node

var args = process.argv.slice(2);
var cp = require('child_process');

const disk_path = args[0];
const tar_path = args[1];

if(args.length !== 2){
   process.stderr.write("usage: tarverify <disk_path> <tar_path>");
   process.exit(1);
}

/*

bin.ice/
   bin.tar.gz
   bin.tar.gz.ice.js
   { 
      bin.tar.gz: {
         sha512: ""
         size: ""
         files: {
            { path: "", size: "", sha512: "" },
            { path: "", size: "", sha512: "" },
         }
      }
   }

  verify .ice just checks the whole archive vs the sha, if it's bad, it goes to the files
  verify disk checks every file in archive
  verify ice vs disk checks ice vs disk

*/

// const bat = spawn('"my script.cmd"', ['a', 'b'], { shell: true });
var on_disk = cp.execSync(`find "${disk_path}" -type f -print0  | xargs -0 shasum -a 512`).toString('utf8');
var in_tar = cp.execSync(`tarsum -c sha512 "${tar_path}"`).toString('utf8');

function make_hash(output){
   var lines = output.trim().split('\n');
   var hash = {};
   lines.forEach(function(line){
      line = line.split("  ");
      hash[line[1]] = { path: line[1], sha512: line[0] };
   });
   return(hash);
}

on_disk = make_hash(on_disk);
in_tar = make_hash(in_tar);

// console.dir(on_disk);
// console.dir(in_tar);

(function verify(){
   var results = [];

   Object.keys(on_disk).forEach(function(key){
      if(!in_tar[key]){
         results.push("not in tar: " + on_disk[key].path);
      }else if(on_disk[key].sha512 !== in_tar[key].sha512){
         results.push("sha512 mismatch: " + on_disk[key].path);
      }
   });

   Object.keys(in_tar).forEach(function(key){
      if(!on_disk[key]){
         results.push("not on disk: " + in_tar[key].path);
      }else if(on_disk[key].sha512 !== in_tar[key].sha512){
         results.push("sha512 mismatch: " + on_disk[key].path);
      }
   });

   if(results.length){
      process.stderr.write(results.join("\n") + "\n");
      process.exit(1);
   }

})();


// # find $1 -type f -print0  | xargs -0 shasum -a 512 | sort | awk ' { t = $1; $1 = $2; $2 = t; print; } ' > "on_disk.sha512"
// # tarsum -c sha512 "$2" | sort | awk ' { t = $1; $1 = $2; $2 = t; print; } ' > "in_tar.sha512"

// # diff < <(awk ' { t = $1; $1 = $2; $2 = t; print; } ' "$2.sha512")
// # comm -3 <(awk ' { t = $1; $1 = $2; $2 = t; print; } ' "$1.sha512") <(awk ' { t = $1; $1 = $2; $2 = t; print; } ' "$2.sha512") | sed 's/^\t//'

// # awk ' { t = $1; $1 = $2; $2 = t; print; } ' "$1.sha512" > "$1.sha512.diff"
// # awk ' { t = $1; $1 = $2; $2 = t; print; } ' "$2.sha512" > "$2.sha512.diff"

// # diff "$1.sha512" "$2.sha512"
